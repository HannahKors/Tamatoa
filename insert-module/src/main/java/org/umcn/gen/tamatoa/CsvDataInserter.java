package org.umcn.gen.tamatoa;

import org.jooq.DSLContext;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.Map;

public class CsvDataInserter {

    private static final Logger LOG = LoggerFactory.getLogger(CsvDataInserter.class);
    private final DSLContext dsl;

    /**
     * Initializes the CsvDataInserter with a given database connection.
     * Sets the log level of JOOQ's LoggerListener to WARN programmatically.
     *
     * @param connection The database connection to be used for JOOQ operations.
     */
    public CsvDataInserter(Connection connection) {
        // Set the log level of JOOQ LoggerListener to WARN programmatically
        Logger jooqLogger = LoggerFactory.getLogger("org.jooq.tools.LoggerListener");
        ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) jooqLogger;
        logbackLogger.setLevel(ch.qos.logback.classic.Level.WARN);

        // Initialize the DSLContext for JOOQ operations
        this.dsl = DSL.using(connection);
    }

    /**
     * Inserts CSV data into the database by performing several steps within a transaction.
     * This includes inserting NGS type, experiment, sample, and quality metrics.
     *
     * @param csvData The CSV data to be inserted.
     * @throws SQLException If an error occurs while inserting the data.
     */
    public void insertCsvData(CsvData csvData) throws SQLException {
        Map<String, Object> dataMap = csvData.getQualityData();
        String ngsType = csvData.getNgsType();
        Date analysisDate = csvData.getAnalysisDate();
        String sampleID = csvData.getSampleId();
        String experimentName = csvData.getExperimentName();

        try {
            dsl.transaction(configuration -> {
                DSLContext txDsl = DSL.using(configuration);

                // Step 1: Insert or verify NGS type
                insertNgsType(txDsl, ngsType);

                // Step 2: Insert into Experiment table
                long experimentId = insertExperiment(txDsl, dataMap, ngsType, analysisDate, experimentName);

                // Step 3: Insert into Sample table
                long sampleId = insertSample(txDsl, experimentId, sampleID);

                // Step 4: Insert quality metrics into the appropriate table
                insertQualityMetrics(txDsl, dataMap, sampleId, experimentId, ngsType);
            });
            // Log success after all data has been inserted
            // LOG.info("Successfully processed file: {}", csvData.getFileName());

        } catch (Exception e) {
            // Log error if anything goes wrong
            LOG.error("Error inserting CSV data for file: {}", csvData.getFileName(), e);
            throw new SQLException("Error inserting CSV data for file: " + csvData.getFileName(), e);
        }
    }

    /**
     * Inserts the NGS type into the NGS table.
     * If the NGS type already exists, it will be ignored.
     *
     * @param txDsl   The DSLContext used to execute the query.
     * @param ngsType The NGS type to be inserted.
     */
    private void insertNgsType(DSLContext txDsl, String ngsType) {
        txDsl.insertInto(DSL.table("NGS"), DSL.field("ngs_type", String.class))
                .values(ngsType)
                .onDuplicateKeyIgnore()
                .execute();
    }

    /**
     * Inserts experiment data into the Experiment table and returns the generated experiment identifier.
     *
     * @param txDsl          The DSLContext used to execute the query.
     * @param dataMap        A map containing the CSV data.
     * @param ngsType        The NGS type.
     * @param analysisDate   The analysis date for the experiment.
     * @param experimentName The name of the experiment.
     * @return The experiment identifier generated by the database.
     * @throws SQLException If an error occurs while inserting the experiment data.
     */
    private long insertExperiment(DSLContext txDsl, Map<String, Object> dataMap, String ngsType, Date analysisDate, String experimentName) throws SQLException {
        //  Important step!!
        //  Check if the experiment already exists
        Long existingExperimentId = txDsl
                .select(DSL.field("experiment_identifier", Long.class))
                .from(DSL.table("Experiment"))
                .where(DSL.field("experiment_name", String.class).eq(experimentName)
                        .and(DSL.field("analysis_date", Date.class).eq(analysisDate))
                        .and(DSL.field("NGS_ngs_type", String.class).eq(ngsType)))
                .fetchOneInto(Long.class);

        // If exists, return the existing ID
        if (existingExperimentId != null) {
            return existingExperimentId;
        }

        // Insert a new experiment if it doesn't exist
        Record record = txDsl.insertInto(DSL.table("Experiment"))
                .set(DSL.field("experiment_name", String.class), experimentName)
                .set(DSL.field("analysis_date", Date.class), analysisDate)
                .set(DSL.field("run_id", String.class), (String) dataMap.getOrDefault("run_id", null))
                .set(DSL.field("sequencer_series", String.class), (String) dataMap.getOrDefault("sequencer_series", null))
                .set(DSL.field("sequencer_id", String.class), (String) dataMap.getOrDefault("sequencer_id", null))
                .set(DSL.field("library_prep_kit", String.class), (String) dataMap.getOrDefault("library_prep_kit", null))
                .set(DSL.field("enrichment_kit", String.class), (String) dataMap.getOrDefault("enrichment_kit", null))
                .set(DSL.field("NGS_ngs_type", String.class), ngsType)
                .returning(DSL.field("experiment_identifier", Long.class))
                .fetchOne();

        // Ensure record is not null
        if (record == null) {
            throw new SQLException("Failed to insert experiment and retrieve identifier.");
        }

        // Extract the value using explicit casting
        return record.get(DSL.field("experiment_identifier", Long.class));
    }


    /**
     * Inserts sample data into the Sample table and returns the generated sample identifier.
     *
     * @param txDsl        The DSLContext used to execute the query.
     * @param experimentId The experiment identifier.
     * @param sampleID     The sample ID to be inserted.
     * @return The sample identifier generated by the database.
     * @throws SQLException If an error occurs while inserting the sample data.
     */
    private long insertSample(DSLContext txDsl, long experimentId, String sampleID) throws SQLException {
        Record record = txDsl.insertInto(DSL.table("Sample"))
                .set(DSL.field("sample_id", String.class), sampleID)
                .set(DSL.field("experiment_experiment_identifier", Long.class), experimentId)
                .returning(DSL.field("sample_identifier", Long.class))
                .fetchOne();

        // Ensure record is not null
        if (record == null) {
            throw new SQLException("Failed to insert sample and retrieve identifier.");
        }

        // Extract the value using explicit casting
        return record.get(DSL.field("sample_identifier", Long.class));
    }

    /**
     * Inserts quality metrics into the appropriate table based on the NGS type.
     *
     * @param txDsl        The DSLContext used to execute the query.
     * @param dataMap      A map containing the CSV data.
     * @param sampleId     The sample identifier.
     * @param experimentId The experiment identifier.
     * @param ngsType      The NGS type.
     */
    private void insertQualityMetrics(DSLContext txDsl, Map<String, Object> dataMap, long sampleId, long experimentId, String ngsType) {
        if ("WGS".equals(ngsType) || "WES".equals(ngsType)) {
            // Insert quality metrics into the Quality_Metrics table for WGS/WES
            dataMap.forEach((key, value) -> {
                if (isExperimentColumn(key) && isSampleColumn(key)) {
                    txDsl.insertInto(DSL.table("Quality_Metrics"))
                            .set(DSL.field("sample_sample_identifier", Long.class), sampleId)
                            .set(DSL.field("quality_metric_key", String.class), key)
                            .set(DSL.field("quality_metric_value", Object.class), value)
                            .execute();
                }
            });
        } else if ("LRS".equals(ngsType)) {
            // Insert quality metrics into the Run_Quality_Metrics table for LRS
            dataMap.forEach((key, value) -> {
                if (isExperimentColumn(key) && isSampleColumn(key)) {
                    txDsl.insertInto(DSL.table("Run_Quality_Metrics"))
                            .set(DSL.field("experiment_experiment_identifier", Long.class), experimentId)
                            .set(DSL.field("run_quality_metric_key", String.class), key)
                            .set(DSL.field("run_quality_metric_value", Object.class), value)
                            .execute();
                }
            });
        }
    }

    /**
     * Checks if a column name is part of the experiment data.
     *
     * @param columnName The column name to check.
     * @return True if the column is part of the experiment data, false otherwise.
     */
    private boolean isExperimentColumn(String columnName) {
        return !columnName.equals("experiment_name") &&
                !columnName.equals("run_id") &&
                !columnName.equals("sequencer_series") &&
                !columnName.equals("sequencer_id") &&
                !columnName.equals("library_prep_kit") &&
                !columnName.equals("enrichment_kit") &&
                !columnName.equals("NGS_ngs_type");
    }

    /**
     * Checks if a column name is part of the sample data.
     *
     * @param columnName The column name to check.
     * @return True if the column is part of the sample data, false otherwise.
     */
    private boolean isSampleColumn(String columnName) {
        return !columnName.equals("sample_id");
    }
}
